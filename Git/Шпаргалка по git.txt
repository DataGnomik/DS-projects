Вся информация, содержащаяся в этом файле была взята из курса по git:
	`https://practicum.yandex.ru/profile/git-basics/`

Итак, приступим с созданию Шпаргалки

Основные команды git (Работа с консолью)

	Навигация
		pwd               — показать рабочую папку;
		ls                — отобразить содержимое директории;
		ls -a             — показать также скрытые файлы и папки, названия которых начинаются с символа .;
		cd first-project  — перейти в папку first-project;

		cd .. — перейти на уровень выше, в родительскую папку;
		cd ~  — перейти в домашнюю директорию (/Users/Username);
		cd /  — перейти в корневую директорию.

	Работа с файлами и папками
		Создание
			touch index.html     — создать файл index.html в текущей папке;
			mkdir second-project — создать папку с именем second-project в текущей папке.

		Копирование и перемещение
			cp file.txt ~/my-dir — копировать файл в другое место;
			mv file.txt ~/my-dir — переместить файл или папку в другое место.

		Чтение
			cat file.txt         — распечатать содержимое текстового файла file.txt.

		Удаление
			rm about.html         — удалить файл about.html;
			rmdir images          — удалить папку images;
			rm -r second-project  — удалить папку second-project и всё, что она содержит.

	Полезные возможности
		Команды необязательно печатать и выполнять по очереди. Можно указать их списком — разделить двумя амперсандами (&&).
		Чтобы не вводить название файла или папки полностью, можно набрать первые символы имени и дважды нажать Tab. Если файл или папка есть в текущей директории, командная строка допишет путь сама.


Начало работы с Git

	Инициализация репозитория
		git init — инициализировать репозиторий.
		
	Синхронизация локального и удалённого репозиториев
		git remote add origin https://github.com/YandexPracticum/first-project.git — привязать локальный репозиторий к удалённому с URL https://github.com/YandexPracticum/first-project.git;
		git remote -v — проверить, что репозитории действительно связались;
		git push -u origin master — в первый раз загрузить все коммиты из локального репозитория в удалённый с названием origin.
		git push — загрузить коммиты в удалённый репозиторий после того, как он был привязан с помощью флага -u.
	
	Подготовка файла к коммиту
		git add todo.txt — добавить файл todo.txt к коммиту;
		git add --all — добавить к коммиту сразу все файлы, в которых были изменения, и все новые файлы;
		git add . — добавить к коммиту текущую папку и все файлы в ней.
	
	Создание и публикация коммита
		git commit -m "Комментарий к коммиту." — сделать коммит и оставить комментарий, чтобы было проще понять, какие изменения сделаны;
		git push — добавь изменения в удалённый репозиторий.
	
	Просмотр информации о коммитах
		git log — вывести подробную историю коммитов;
		git log --oneline — показать краткую информацию о коммитах: сокращённый хеш и сообщение.
	
	Просмотр состояния файлов
		git status — показать текущее состояние репозитория.
	
	Добавление изменений в последний коммит
		git commit --amend --no-edit — добавить изменения к последнему коммиту и оставь сообщение прежним;
		git commit --amend -m "Новое сообщение" — изменить сообщение к последнему коммиту на Новое сообщение.

 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ~~~   Выйти из редактора Vim: нажать Esc, ввести :qa!, нажать Enter.     ~~~
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	«Откат» файлов и коммитов
		git restore --staged hello.txt — перевести файл hello.txt из состояния staged обратно в untracked или modified;
		git restore hello.txt — вернуть файл hello.txt к последней версии, которая была сохранена через git commit или git add;
		git reset --hard b576d89 — удалить все незакоммиченные изменения из staging и «рабочей зоны» вплоть до указанного коммита.
	
	Просмотр изменений
		git diff — показать изменения в «рабочей зоне», то есть в modified-файлах;
		git diff a9928ab 11bada1 — вывести разницу между двумя коммитами;
		git diff --staged — показать изменения, которые добавлены в staged-файлах.


Работа с ветками
	
	Клонирование чужого репозитория
		git clone git@github.com:YandexPraktikum/first-project.git — клонировать репозиторий с URL first-project.git из аккаунта YandexPraktikum на мой локальный компьютер.
	
	Создание веток
		git branch feature/the-finest-branch — создать ветку от текущей с названием feature/the-finest-branch;
		git checkout -b feature/the-finest-branch — создать ветку feature/the-finest-branch и сразу переключиться на неё.
	
	Навигация по веткам
		git branch — показать, какие есть ветки в репозитории и в какой из них я нахожусь (текущая ветка будет отмечена символом *);
		git branch -a — показать все известные ветки, как локальные (в локальном репозитории), так и удалённые (в origin, или на GitHub).
		git checkout feature/br — переключиться на ветку feature/br.
	
	Сравнение веток
		git diff main HEAD — показать разницу между веткой main и указателем на HEAD;
		git diff HEAD~2 HEAD — показать разницу между тем коммитом, который был два коммита назад, и текущим.
	
	Удаление веток
		git branch -d br-name — удалить ветку br-name, но только если она является частью main;
		git branch -D br-name — удалить ветку br-name, даже если она не объединена с main.
	
	Слияние веток
		git merge main — объединить ветку main с текущей активной веткой. 
	
	Работа с удалённым репозиторием
		git push -u origin my-branch — отправить новую ветку my-branch в удалённый репозиторий и связать локальную ветку с удалённой, чтобы при дополнительных коммитах можно было писать просто git push без -u;
		git push my-branch — отправить дополнительные изменения в ветку my-branch, которая уже существует в удалённом репозитории;
		git pull — подтянуть изменения текущей ветки из удалённого репозитория.


Командная работа в Git

	Feature branch workflow
		Самый популярный подход к работе с Git в команде — это feature branch workflow.
		В нём создают ветку для каждой задачи (например, для новой функциональности или исправления бага),
		а когда всё готово, вливают новую ветку в main.
		
		Важные этапы этого процесса — пул-реквест и ревью изменений. 
		Пул-реквест — это интерфейс, в котором можно обсудить изменения. 
		Ревью — просмотр изменений другими участниками и один из способов проверить качество таких изменений.

		Если вы уже участник проекта (или collaborator в терминах GitHub), можно клонировать репозиторий напрямую. 
		А если нет, нужно предварительно сделать «форк». 
		Также для участников доступна кнопка Merge после ревью, а для неучастников — нет.

	Конфликты слияния
		Когда один и тот же файл меняется в нескольких ветках, при их слиянии может произойти конфликт. 
		Пугаться конфликтов не нужно, это нормальная часть работы с системами контроля версий. 
		IDE, вроде VSCode или Intellij IDEA, помогут «склеить» файл из двух конфликтующих версий.

	Алгоритм-шпаргалка для создания PR
		1. Склонировать репозиторий.
			1.1. Если вы не участник проекта, предварительно сделать «форк» исходного репозитория.
			1.2. На странице репозитория или «форка» нажать кнопки: Code → SSH → скопировать ссылку.
			1.3. Выполнить команду git clone <ссылка на репозиторий>.
		2. Создать ветку для вашей задачи: git checkout -b my-task-branch-name.
		3. Добавить и «закоммитить» изменения, которые вы хотите внести в проект.
		4. «Запушить» ветку: git push --set-upstream origin HEAD или git push -u origin my-task-branch-name.
			4.1. GitHub (с помощью Git) выведет ссылку на создание PR. По ней нужно перейти.
			4.2. PR можно также создать через интерфейс GitHub.
		5. Сообщить о пул-реквесте ревьюеру.
			5.1. Иногда ревьюеры назначаются автоматически, тогда сообщать не нужно.
		6. Обсуждать с ревьюером предлагаемые изменения и вносить правки, пока эти изменения не будут одобрены.  
			6.1. Если кто-то добавил конфликтующие изменения в main, пока ваш PR был на ревью, нужно разрешить конфликт:  
				-- Обновить main: git checkout main && git pull.
				-- Влить main в свою ветку: git checkout my-task-branch-name && git merge main.
				-- Разрешить конфликты слияния с помощью IDE или вручную.
				-- Создать коммит слияния: git commit --no-edit или git commit -m 'merge main'.
				-- Сделать git push своей ветки.
		7. Нажать кнопку Merge или подождать, пока её нажмёт кто-то ещё.
		8. Ещё раз обновить main, чтобы «подтянуть» ваши изменения в основную ветку локального репозитория: git checkout main && git pull.
		9. Хорошая работа! Можно начинать снова со второго пункта.
		
	Алгоритм-шпаргалка для разрешения конфликтов слияния
		1. Открыть проект в IDE (VS Code, IDEA или другие).
		2. Открыть файл, в котором есть конфликт.
		3. Выбрать, какие части файла нужно взять из одной ветки, а какие — из другой.
		4. Когда конфликты разрешены, сделать коммит: git commit --no-edit или git commit -m 'merge branch <название ветки>'.


Полезные ссылки для изучения git
	Markdown Cheat Sheet
		`https://www.markdownguide.org/cheat-sheet/`
	Соглашение о коммитах
		`https://www.conventionalcommits.org/ru/v1.0.0-beta.4/#%D1%81%D0%BF%D0%B5%D1%86%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D1%8F`
	Объяснение полезных Git команд с помощью визуализации
		`https://bool.dev/blog/detail/vizualizatsiya-poleznykh-git-komand`
	Основы Git - Псевдонимы в Git
		`https://git-scm.com/book/ru/v2/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%9F%D1%81%D0%B5%D0%B2%D0%B4%D0%BE%D0%BD%D0%B8%D0%BC%D1%8B-%D0%B2-Git`
